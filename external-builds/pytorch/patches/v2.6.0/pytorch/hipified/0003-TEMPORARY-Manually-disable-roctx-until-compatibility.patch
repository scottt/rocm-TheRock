From 143ecbd5d946545189613737b7f9911ecc18f1d6 Mon Sep 17 00:00:00 2001
From: Stella Laurenzo <stellaraccident@gmail.com>
Date: Wed, 19 Feb 2025 17:16:27 -0800
Subject: [PATCH 3/4] TEMPORARY: Manually disable roctx until compatibility
 with rocprofv3 is established.

---
 torch/csrc/cuda/shared/nvtx.cpp    | 19 ++++++++++++-------
 torch/csrc/profiler/stubs/cuda.cpp | 11 ++++++++---
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/torch/csrc/cuda/shared/nvtx.cpp b/torch/csrc/cuda/shared/nvtx.cpp
index a14ba6b..b545703 100644
--- a/torch/csrc/cuda/shared/nvtx.cpp
+++ b/torch/csrc/cuda/shared/nvtx.cpp
@@ -1,11 +1,13 @@
 #ifdef _WIN32
 #include <wchar.h> // _wgetenv for nvtx
 #endif
+/* TODO: Enable when rocprofv3 compat is available.
 #ifdef TORCH_CUDA_USE_NVTX3
 #include <roctracer/roctx.h>
 #else
 #include <roctracer/roctx.h>
 #endif
+*/
 #include <hip/hip_runtime.h>
 #include <torch/csrc/utils/pybind.h>
 
@@ -18,7 +20,8 @@ struct RangeHandle {
 
 static void device_callback_range_end(void* userData) {
   RangeHandle* handle = ((RangeHandle*)userData);
-  roctxRangeStop(handle->id);
+  // TODO: Enable when rocprofv3 compat is available.
+  //roctxRangeStop(handle->id);
   free((void*)handle->msg);
   free((void*)handle);
 }
@@ -29,7 +32,9 @@ static void device_nvtxRangeEnd(void* handle, std::intptr_t stream) {
 
 static void device_callback_range_start(void* userData) {
   RangeHandle* handle = ((RangeHandle*)userData);
-  handle->id = roctxRangeStartA(handle->msg);
+  // TODO: Enable when rocprofv3 compat is available.
+  // handle->id = roctxRangeStartA(handle->msg);
+  handle->id = 0;
 }
 
 static void* device_nvtxRangeStart(const char* msg, std::intptr_t stream) {
@@ -49,11 +54,11 @@ void initNvtxBindings(PyObject* module) {
 #else
   auto nvtx = m.def_submodule("_nvtx", "libNvToolsExt.so bindings");
 #endif
-  nvtx.def("rangePushA", roctxRangePushA);
-  nvtx.def("rangePop", roctxRangePop);
-  nvtx.def("rangeStartA", roctxRangeStartA);
-  nvtx.def("rangeEnd", roctxRangeStop);
-  nvtx.def("markA", roctxMarkA);
+  nvtx.def("rangePushA", [](const char*) {} /*roctxRangePushA*/);
+  nvtx.def("rangePop", []() { } /*roctxRangePop*/);
+  nvtx.def("rangeStartA", [](const char*) { return 0; }/*roctxRangeStartA*/);
+  nvtx.def("rangeEnd", []() {}/*roctxRangeStop*/);
+  nvtx.def("markA", [](const char*) {}/*roctxMarkA */);
   nvtx.def("deviceRangeStart", device_nvtxRangeStart);
   nvtx.def("deviceRangeEnd", device_nvtxRangeEnd);
 }
diff --git a/torch/csrc/profiler/stubs/cuda.cpp b/torch/csrc/profiler/stubs/cuda.cpp
index e4ad3fc..a92c5bc 100644
--- a/torch/csrc/profiler/stubs/cuda.cpp
+++ b/torch/csrc/profiler/stubs/cuda.cpp
@@ -1,10 +1,12 @@
 #include <sstream>
 
+/* TODO: Enable when rocprofv3 compat is in TheRock
 #ifdef TORCH_CUDA_USE_NVTX3
 #include <roctracer/roctx.h>
 #else
 #include <roctracer/roctx.h>
 #endif
+*/
 
 #include <ATen/hip/impl/HIPGuardImplMasqueradingAsCUDA.h>
 #include <c10/util/ApproximateClock.h>
@@ -72,15 +74,18 @@ struct CUDAMethods : public ProfilerStubs {
   }
 
   void mark(const char* name) const override {
-    ::roctxMark(name);
+    // TODO: Enable when rocprofv3 compat is available.
+    //::roctxMark(name);
   }
 
   void rangePush(const char* name) const override {
-    ::roctxRangePushA(name);
+    // TODO: Enable when rocprofv3 compat is available.
+    //::roctxRangePushA(name);
   }
 
   void rangePop() const override {
-    ::roctxRangePop();
+    // TODO: Enable when rocprofv3 compat is available.
+    //::roctxRangePop();
   }
 
   void onEachDevice(std::function<void(int)> op) const override {
-- 
2.48.1

